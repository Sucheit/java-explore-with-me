{
  "info": {
    "_postman_id": "00c7423d-33d5-493d-ae23-0a2f4da56c0d",
    "name": "Tests for feature Subscriptions",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26170185"
  },
  "item": [
    {
      "name": "subscribers",
      "item": [
        {
          "name": "Creating user SubscribedTo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json; \r",
                  "}); \r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"SubscribedTo@mail.ru\"').to.eql('SubscribedTo@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"SubscribedTo\"').to.eql('SubscribedTo');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"SubscribedTo\",\r\n    \"email\":\"SubscribedTo@mail.ru\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/admin/users",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Creating user Subscriber",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json; \r",
                  "}); \r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"Subscriber@mail.ru\"').to.eql('Subscriber@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Subscriber\"').to.eql('Subscriber');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"Subscriber\",\r\n    \"email\":\"Subscriber@mail.ru\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/admin/users",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscriptions Subcriber",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list subscribers response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscribtions Invalid user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Test list subscribers response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/99/subscriptions",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "99",
                "subscriptions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Creating category by admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json; \r",
                  "}); \r",
                  "pm.test(\"Test category 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test category 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Category\"').to.eql('Category');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"Category\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/admin/categories",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Creating event by user SubscribedTo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json; \r",
                  "}); "
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"annotation\":\"annotation1annotation1annotation1annotation1\",\r\n    \"category\": 1,\r\n    \"description\": \"description1description1description1description1\",\r\n    \"eventDate\": \"2023-10-10 20:00:00\",\r\n    \"location\": {\r\n                    \"lat\": 100,\r\n                    \"lon\": 100\r\n                 },\r\n                 \"title\":\"title1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/users/1/events",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Creating subscription Subscriber to SubscribedTo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1); \r",
                  "});\r",
                  "pm.test(\"Test subscriptions[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"SubscribedTo@mail.ru\"').to.eql('SubscribedTo@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"SubscribedTo\"').to.eql('SubscribedTo');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions/1",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Creating subscription again",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Test list subscribers response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions/1",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Creating subscription by invalid user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Test list subscribers response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/999/subscriptions/1",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "999",
                "subscriptions",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscriptions by Subscriber user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1); \r",
                  "});\r",
                  "pm.test(\"Test subscriptions[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"SubscribedTo@mail.ru\"').to.eql('SubscribedTo@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"SubscribedTo\"').to.eql('SubscribedTo');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscriptions by SubscribedTo user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1); \r",
                  "});\r",
                  "pm.test(\"Test subscriptions[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"SubscribedTo@mail.ru\"').to.eql('SubscribedTo@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"SubscribedTo\"').to.eql('SubscribedTo');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscriptions events before event publication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0); \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions/events",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Publish event by admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json; \r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql(\"PUBLISHED\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/admin/events/1",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "events",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscription events after event publication Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1); \r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be \"1\"').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"title1\"').to.eql(\"title1\");\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('initiator');\r",
                  "    pm.expect(jsonData[0].initiator.name, '\"initiator\" must be \"SubscribedTo\"').to.eql(\"SubscribedTo\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions/events",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Deleting subscription by invalid user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Test list subscribers response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/999/subscriptions/1",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "999",
                "subscriptions",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Deleting subscription Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions/1",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Deleting subscription Again",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Test list subscribers response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions/1",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscriptions after subscription deletion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0); \r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Getting subscriptions events after subscription deletion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Ответ должен быть успешен и данные в формате json\", function() {\r",
                  "    pm.response.to.be.success;\r",
                  "    pm.response.to.be.withBody; \r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0); \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/2/subscriptions/events",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "subscriptions",
                "events"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}